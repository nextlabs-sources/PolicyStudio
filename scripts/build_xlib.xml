<!-- build_xlib.xml

Description:
	This ANT script constructs <project root>/xlib.

	To use this script, you must update properties is <project root>/scripts/build.properties or overide 
	them from commandline (using -D option). For example:
		
		set PATH=C:\depot\external\apache-ant\apache-ant-1.8.4\bin;%PATH%
		ant -XX:MaxPermSize=512m -Dnlbuildroot=C:/depot/PolicyStudio/dev/BuildScript_1205 -Dexternal.dir=c:/depot/external -Dexternal.dir=c:/depot/external -f scripts/build_xlib.xml
		
	or
		
		set PATH=C:\depot\external\apache-ant\apache-ant-1.8.4\bin;%PATH%
		set ANT_OPTS=-XX:MaxPermSize=512m -Dnlbuildroot=%NLBUILDROOT% -Dexternal.dir=%NLEXTERNALDIR% -Dexternal.dir=%NLEXTERNALDIR% 
		ant -f scripts/build_xlib.xml -v	
-->

<project name="build_xlib" default="all" basedir="..">

	<!-- Debug 
	<echoproperties />
	<fail message="INFO: Debug" />
	-->

	<!-- Properties -->
	<property name="nlbuildroot" location="${basedir}"/>

	<property file="${nlbuildroot}/scripts/build.properties" />
	<property file="${nlbuildroot}/scripts/build_common.properties" />

	<!-- Dump properties -->
	<echoproperties />

	<echo message="INFO: Dump properties completed" />

	<!-- Sanity checks -->
	<fail message="external.dir is not set" unless="external.dir" />
	<fail message="external.dir is empty">
		<condition>
			<equals arg1="${external.dir}" arg2="" trim="true" />
		</condition>
	</fail>
	<available file="${external.dir}" type="dir" property="local.external.dir_exists" />
	<fail message="external.dir directory does not exist - ${external.dir}" unless="local.external.dir_exists" />

	<fail message="external2.dir is not set" unless="external2.dir" />
	<fail message="external2.dir is empty">
		<condition>
			<equals arg1="${external2.dir}" arg2="" trim="true" />
		</condition>
	</fail>
	<available file="${external2.dir}" type="dir" property="local.external2.dir_exists" />
	<fail message="external2.dir directory does not exist - ${external2.dir}" unless="local.external2.dir_exists" />

	<echo message="INFO: Sanity check completed (no error)" />

	<!-- Targets-->
	<target name="all" depends="clean, prepare_destiny_jar, prepare_fate_x86, prepare_fate_x64, prepare_installer_x86, prepare_installer_x64, prepare_external_java, prepare_external_x86, prepare_external_x64" />
	
	<target name="prepare_destiny_jar">
		<mkdir dir="${xlib_jar_dir}" />
		
		<!-- Extract files -->
		<unzip src="${xlib_destiny_build_artifacts_zip_file}" dest="${xlib_jar_dir}" overwrite="yes">
			<patternset>
				<include name="**/agent-ipc.jar" />
				<include name="**/app-framework.jar" />
				<include name="**/client-pf.jar" />
				<include name="**/client-security-config.jar" />
				<include name="**/common-domain-types.jar" />
				<include name="**/common-domain.jar" />
				<include name="**/common-framework-types.jar" />
				<include name="**/common-framework.jar" />
				<include name="**/common-pf.jar" />
				<include name="**/common-res.jar" />
				<include name="**/common-version-impl.jar" />
				<include name="**/common-version.jar" />
				<include name="**/crypt.jar" />
				<include name="**/policy-services.jar" />
				<include name="**/policy-types.jar" />
				<include name="**/server-shared-services.jar" />
				<include name="**/server-shared-types.jar" />
				<include name="**/version-types.jar" />
				<include name="**/version.jar" />
				<include name="**/batchdeployer.jar" />
				<include name="**/logremover.jar" />

			</patternset>
			<mapper type="flatten" />
		</unzip>
		
		<!--Extract policyAuthor-keystore from client-pf.jar-->
		<unzip src="${xlib_jar_dir}/client-pf.jar" dest="${xlib_jar_dir}">
			<patternset>
				<include name="**/*.jks"/>
			</patternset>
			<mapper type="flatten" />
		</unzip>
		
		<!--Delete security folder from client-pf.jar-->
		<zip destfile="${xlib_jar_dir}/client-pf_new.jar">
		  <zipfileset src="${xlib_jar_dir}/client-pf.jar">
			<exclude name="security/"/>
		  </zipfileset>
		</zip>
		
		<!--Change Manifest File for crypt.jar-->
	    <jar file="${xlib_jar_dir}/crypt.jar" update="true">
		    <manifest>
				<attribute name="Class-Path" value="./common-framework.jar"/>
		    </manifest> 
	    </jar>

		<!-- Check if file exists 
		Notes: Currently, Unzip task or ZipFileSet does not have a way to report error if a file
		cannot be found in a zip file. In addition, there is no simple way to check if a file 
		exists in Ant. We can call out to Bash to check if a file exists, but that creates an
		unnecessary dependency on Bash. In the following, we try to check if a file exist using
		a fake move. Doing this, an error will be generated if a file does not exist.
		-->
		<move file="${xlib_jar_dir}/agent-ipc.jar" todir="${xlib_jar_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_jar_dir}/app-framework.jar" todir="${xlib_jar_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_jar_dir}/client-pf_new.jar" tofile="${xlib_jar_dir}/client-pf.jar" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_jar_dir}/policyAuthor-keystore.jks" todir="${xlib_jar_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_jar_dir}/client-security-config.jar" todir="${xlib_jar_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_jar_dir}/common-domain-types.jar" todir="${xlib_jar_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_jar_dir}/common-domain.jar" todir="${xlib_jar_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_jar_dir}/common-framework-types.jar" todir="${xlib_jar_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_jar_dir}/common-framework.jar" todir="${xlib_jar_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_jar_dir}/common-pf.jar" todir="${xlib_jar_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_jar_dir}/common-res.jar" todir="${xlib_jar_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_jar_dir}/common-version-impl.jar" todir="${xlib_jar_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_jar_dir}/common-version.jar" todir="${xlib_jar_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_jar_dir}/crypt.jar" todir="${xlib_jar_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_jar_dir}/policy-services.jar" todir="${xlib_jar_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_jar_dir}/policy-types.jar" todir="${xlib_jar_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_jar_dir}/server-shared-services.jar" todir="${xlib_jar_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_jar_dir}/server-shared-types.jar" todir="${xlib_jar_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_jar_dir}/version-types.jar" todir="${xlib_jar_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_jar_dir}/version.jar" todir="${xlib_jar_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_jar_dir}/batchdeployer.jar" todir="${xlib_jar_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_jar_dir}/logremover.jar" todir="${xlib_jar_dir}" preservelastmodified="true" overwrite="false" />
	</target>

	<target name="prepare_fate_x86">
		<mkdir dir="${xlib_bin32_dir}" />
		
		<!-- Extract files -->
		<unzip src="${xlib_fate_build_artifacts_bin_zip_file}" dest="${xlib_bin32_dir}" overwrite="yes">
			<patternset>
				<include name="bin/release_win_x86/nlQuench.exe" />
				<include name="bin/release_win_x86/celog32.dll" />
				<include name="bin/release_win_x86/IPCJNI32.dll" />
				<include name="bin/release_win_x86/NetworkUtils32.dll" />
				<include name="bin/release_win_x86/nl_sysenc_lib32.dll" />
				<include name="bin/release_win_x86/pdflib32.dll" />
				<include name="bin/release_win_x86/resattrlib32.dll" />
				<include name="bin/release_win_x86/resattrmgr32.dll" />
				<include name="bin/release_win_x86/tag_office2k732.dll" />
			</patternset>
			<mapper type="flatten" />
		</unzip>
		
		<!-- Check if file exists 
		Notes: Currently, Unzip task or ZipFileSet does not have a way to report error if a file
		cannot be found in a zip file. In addition, there is no simple way to check if a file 
		exists in Ant. We can call out to Bash to check if a file exists, but that creates an
		unnecessary dependency on Bash. In the following, we try to check if a file exist using
		a fake move. Doing this, an error will be generated if a file does not exist.
		-->
		<move file="${xlib_bin32_dir}/nlQuench.exe" todir="${xlib_bin32_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_bin32_dir}/celog32.dll" todir="${xlib_bin32_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_bin32_dir}/IPCJNI32.dll" todir="${xlib_bin32_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_bin32_dir}/NetworkUtils32.dll" todir="${xlib_bin32_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_bin32_dir}/nl_sysenc_lib32.dll" todir="${xlib_bin32_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_bin32_dir}/pdflib32.dll" todir="${xlib_bin32_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_bin32_dir}/resattrlib32.dll" todir="${xlib_bin32_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_bin32_dir}/resattrmgr32.dll" todir="${xlib_bin32_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_bin32_dir}/tag_office2k732.dll" todir="${xlib_bin32_dir}" preservelastmodified="true" overwrite="false" />
	</target>

	<target name="prepare_fate_x64">
		<mkdir dir="${xlib_bin64_dir}" />
		
		<!-- Extract files -->
		<unzip src="${xlib_fate_build_artifacts_bin_zip_file}" dest="${xlib_bin64_dir}" overwrite="yes">
			<patternset>
				<include name="bin/release_win_x64/nlQuench.exe" />
				<include name="bin/release_win_x64/celog.dll" />
				<include name="bin/release_win_x64/IPCJNI.dll" />
				<include name="bin/release_win_x64/NetworkUtils.dll" />
				<include name="bin/release_win_x64/nl_sysenc_lib.dll" />
				<include name="bin/release_win_x64/pdflib.dll" />
				<include name="bin/release_win_x64/resattrlib.dll" />
				<include name="bin/release_win_x64/resattrmgr.dll" />
				<include name="bin/release_win_x64/tag_office2k7.dll" />
			</patternset>
			<mapper type="flatten" />
		</unzip>
		
		<!-- Check if file exists 
		Notes: Currently, Unzip task or ZipFileSet does not have a way to report error if a file
		cannot be found in a zip file. In addition, there is no simple way to check if a file 
		exists in Ant. We can call out to Bash to check if a file exists, but that creates an
		unnecessary dependency on Bash. In the following, we try to check if a file exist using
		a fake move. Doing this, an error will be generated if a file does not exist.
		-->
		<move file="${xlib_bin64_dir}/nlQuench.exe" todir="${xlib_bin64_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_bin64_dir}/celog.dll" todir="${xlib_bin64_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_bin64_dir}/IPCJNI.dll" todir="${xlib_bin64_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_bin64_dir}/NetworkUtils.dll" todir="${xlib_bin64_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_bin64_dir}/nl_sysenc_lib.dll" todir="${xlib_bin64_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_bin64_dir}/pdflib.dll" todir="${xlib_bin64_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_bin64_dir}/resattrlib.dll" todir="${xlib_bin64_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_bin64_dir}/resattrmgr.dll" todir="${xlib_bin64_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_bin64_dir}/tag_office2k7.dll" todir="${xlib_bin64_dir}" preservelastmodified="true" overwrite="false" />
	</target>

	<target name="prepare_installer_x86">
		<mkdir dir="${xlib_bin32_dir}" />

		<!-- Extract files -->
		<unzip src="${xlib_installer_build_artifacts_xlib_bin_zip_file}" dest="${xlib_bin32_dir}" overwrite="yes">
			<patternset>
				<include name="bin/release_win_x86/InstallerCommon32.dll" />
				<include name="bin/release_win_x86/Installer_CA32.dll" />
				<include name="bin/release_win_x86/PA_CA32.dll" />
			</patternset>
			<mapper type="flatten" />
		</unzip>

		<!-- Check if file exists 
		Notes: Currently, Unzip task or ZipFileSet does not have a way to report error if a file
		cannot be found in a zip file. In addition, there is no simple way to check if a file 
		exists in Ant. We can call out to Bash to check if a file exists, but that creates an
		unnecessary dependency on Bash. In the following, we try to check if a file exist using
		a fake move. Doing this, an error will be generated if a file does not exist.
		-->
		<move file="${xlib_bin32_dir}/InstallerCommon32.dll" todir="${xlib_bin32_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_bin32_dir}/Installer_CA32.dll" todir="${xlib_bin32_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_bin32_dir}/PA_CA32.dll" todir="${xlib_bin32_dir}" preservelastmodified="true" overwrite="false" />
	</target>

	<target name="prepare_installer_x64">
		<mkdir dir="${xlib_bin64_dir}" />

		<!-- Extract files -->
		<!-- unzip src="${xlib_installer_build_artifacts_xlib_bin_zip_file}" dest="${xlib_bin64_dir}" overwrite="yes">
			<patternset>
				<include name="bin/release_win_x64/InstallerCommon.dll" />
				<include name="bin/release_win_x64/Installer_CA.dll" />
				<include name="bin/release_win_x64/PA_CA.dll" />
			</patternset>
			<mapper type="flatten" />
		</unzip -->

		<!-- Check if file exists 
		Notes: Currently, Unzip task or ZipFileSet does not have a way to report error if a file
		cannot be found in a zip file. In addition, there is no simple way to check if a file 
		exists in Ant. We can call out to Bash to check if a file exists, but that creates an
		unnecessary dependency on Bash. In the following, we try to check if a file exist using
		a fake move. Doing this, an error will be generated if a file does not exist.
		-->
		<!-- move file="${xlib_bin64_dir}/InstallerCommon.dll" todir="${xlib_bin64_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_bin64_dir}/Installer_CA.dll" todir="${xlib_bin64_dir}" preservelastmodified="true" overwrite="false" />
		<move file="${xlib_bin64_dir}/PA_CA.dll" todir="${xlib_bin64_dir}" preservelastmodified="true" overwrite="false" / -->
	</target>

	<!-- Notes: We remove version #s in jar files to avoid complexity in changing a file version.
		Notice that names of third-party jar files are hardcoded in the following files.
			//depot/PolicyStudio/Build_Script/com.nextlabs.policystudio.dependencies/.classpath
			//depot/PolicyStudio/Build_Script/com.nextlabs.policystudio.dependencies/build.properties
			//depot/PolicyStudio/Build_Script/com.nextlabs.policystudio.dependencies/META-INF/MANIFEST.MF
	-->
	<target name="prepare_external_java">
		<mkdir dir="${xlib_jar_dir}" />
		
		<!-- Copy files -->
		<copy file="${external2.dir}/ant-contrib/ant-contrib-1.0b2/lib/ant-contrib.jar" todir="${xlib_jar_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external2.dir}/ajax4jsf/ajax4jsf-1.1.1/ajax4jsf/lib/commons-collections-3.2.jar" tofile="${xlib_jar_dir}/commons-collections.jar" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external2.dir}/antlr/antlr-2.7.4/antlr.jar" todir="${xlib_jar_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		
		<copy file="${external2.dir}/axis/axis-1_2/lib/axis.jar" todir="${xlib_jar_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external2.dir}/axis/axis-1_2/lib/commons-discovery-0.2.jar" tofile="${xlib_jar_dir}/commons-discovery.jar" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external2.dir}/axis/axis-1_2/lib/jaxrpc.jar" todir="${xlib_jar_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external2.dir}/axis/axis-1_2/lib/saaj.jar" todir="${xlib_jar_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external2.dir}/axis/axis-1_2/lib/wsdl4j-1.5.1.jar" tofile="${xlib_jar_dir}/wsdl4j.jar" preservelastmodified="true" overwrite="false" verbose="true" />

		<copy file="${external2.dir}/c3p0/c3p0-0.9.1.2/lib/c3p0-0.9.1.2.jar" tofile="${xlib_jar_dir}/c3p0.jar" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external2.dir}/castor/castor0.9.5.4/castor-0.9.5.4.jar" tofile="${xlib_jar_dir}/castor.jar" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external2.dir}/commons-cli-1.0/commons-cli-1.0.jar" tofile="${xlib_jar_dir}/commons-cli.jar" preservelastmodified="true" overwrite="false" verbose="true" />

		<copy file="${external2.dir}/dnsjava/dnsjava.jar" todir="${xlib_jar_dir}" preservelastmodified="true" overwrite="false" verbose="true" />

		<copy file="${external2.dir}/ehcache/ehcache-1.1/ehcache-1.1.jar" tofile="${xlib_jar_dir}/ehcache.jar" preservelastmodified="true" overwrite="false" verbose="true" />

		<copy file="${external2.dir}/hibernate/hibernate-2.1/lib/cglib-full-2.0.2.jar" tofile="${xlib_jar_dir}/cglib-full.jar" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external2.dir}/hibernate/hibernate-2.1/lib/commons-logging-1.0.4.jar" tofile="${xlib_jar_dir}/commons-logging.jar" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external2.dir}/hibernate/hibernate-2.1/lib/dom4j-1.4.jar" tofile="${xlib_jar_dir}/dom4j.jar" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external2.dir}/hibernate/hibernate-2.1/hibernate2.jar" tofile="${xlib_jar_dir}/hibernate.jar" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external2.dir}/hibernate/hibernate-2.1/lib/odmg-3.0.jar" tofile="${xlib_jar_dir}/odmg.jar" preservelastmodified="true" overwrite="false" verbose="true" />

		<copy file="${external2.dir}/iText/itext-2.0.8.jar" tofile="${xlib_jar_dir}/iText.jar" preservelastmodified="true" overwrite="false" verbose="true" />

		<copy file="${external2.dir}/jaf/jaf-1.0.2/activation.jar" todir="${xlib_jar_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external2.dir}/javamail/javamail-1.3.2/mail.jar" todir="${xlib_jar_dir}" preservelastmodified="true" overwrite="false" verbose="true" />

		<copy file="${external2.dir}/xerces/xerces-2_6_2/xercesImpl.jar" todir="${xlib_jar_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
	</target>

	<target name="prepare_external_x86">
		<mkdir dir="${xlib_bin32_dir}" />

		<!-- Copy files -->
		<copy file="${external.dir}/microsoft/redist/x86/Microsoft.VC90.ATL/atl90.dll" todir="${xlib_bin32_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external.dir}/microsoft/redist/x86/Microsoft.VC90.CRT/msvcm90.dll" todir="${xlib_bin32_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external.dir}/microsoft/redist/x86/Microsoft.VC90.CRT/msvcp90.dll" todir="${xlib_bin32_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external.dir}/microsoft/redist/x86/Microsoft.VC90.CRT/msvcr90.dll" todir="${xlib_bin32_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external.dir}/microsoft/redist/x86/Microsoft.VC90.MFC/mfc90.dll" todir="${xlib_bin32_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external.dir}/microsoft/redist/x86/Microsoft.VC90.MFC/mfc90u.dll" todir="${xlib_bin32_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external.dir}/microsoft/redist/x86/Microsoft.VC90.MFC/mfcm90.dll" todir="${xlib_bin32_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external.dir}/microsoft/redist/x86/Microsoft.VC90.MFC/mfcm90u.dll" todir="${xlib_bin32_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external.dir}/microsoft/redist/x86/Microsoft.VC90.OpenMP/vcomp90.dll" todir="${xlib_bin32_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external.dir}/microsoft/redist/x86/Microsoft.VC90.ATL/Microsoft.VC90.ATL.manifest" todir="${xlib_bin32_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external.dir}/microsoft/redist/x86/Microsoft.VC90.CRT/Microsoft.VC90.CRT.manifest" todir="${xlib_bin32_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external.dir}/microsoft/redist/x86/Microsoft.VC90.MFC/Microsoft.VC90.MFC.manifest" todir="${xlib_bin32_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external.dir}/microsoft/redist/x86/Microsoft.VC90.OpenMP/Microsoft.VC90.OpenMP.manifest" todir="${xlib_bin32_dir}" preservelastmodified="true" overwrite="false" verbose="true" />

		<copy file="${external.dir}/freetype/bin/freetype6.dll" todir="${xlib_bin32_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external.dir}/tiff-4.0.0beta2/libtiff/libtiff.dll" todir="${xlib_bin32_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external.dir}/podofo-0.8.1-NextLabs-WFSE/release_lib_win32_vs2008/PoDoFoLib.dll" todir="${xlib_bin32_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external.dir}/zlib/zlib1.dll" todir="${xlib_bin32_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
	</target>

	<target name="prepare_external_x64">
		<mkdir dir="${xlib_bin64_dir}" />

		<!-- Copy files -->
		<copy file="${external.dir}/microsoft/redist/amd64/Microsoft.VC90.ATL/atl90.dll" todir="${xlib_bin64_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external.dir}/microsoft/redist/amd64/Microsoft.VC90.CRT/msvcm90.dll" todir="${xlib_bin64_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external.dir}/microsoft/redist/amd64/Microsoft.VC90.CRT/msvcp90.dll" todir="${xlib_bin64_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external.dir}/microsoft/redist/amd64/Microsoft.VC90.CRT/msvcr90.dll" todir="${xlib_bin64_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external.dir}/microsoft/redist/amd64/Microsoft.VC90.MFC/mfc90.dll" todir="${xlib_bin64_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external.dir}/microsoft/redist/amd64/Microsoft.VC90.MFC/mfc90u.dll" todir="${xlib_bin64_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external.dir}/microsoft/redist/amd64/Microsoft.VC90.MFC/mfcm90.dll" todir="${xlib_bin64_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external.dir}/microsoft/redist/amd64/Microsoft.VC90.MFC/mfcm90u.dll" todir="${xlib_bin64_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external.dir}/microsoft/redist/amd64/Microsoft.VC90.OpenMP/vcomp90.dll" todir="${xlib_bin64_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external.dir}/microsoft/redist/amd64/Microsoft.VC90.ATL/Microsoft.VC90.ATL.manifest" todir="${xlib_bin64_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external.dir}/microsoft/redist/amd64/Microsoft.VC90.CRT/Microsoft.VC90.CRT.manifest" todir="${xlib_bin64_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external.dir}/microsoft/redist/amd64/Microsoft.VC90.MFC/Microsoft.VC90.MFC.manifest" todir="${xlib_bin64_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external.dir}/microsoft/redist/amd64/Microsoft.VC90.OpenMP/Microsoft.VC90.OpenMP.manifest" todir="${xlib_bin64_dir}" preservelastmodified="true" overwrite="false" verbose="true" />

		<copy file="${external.dir}/tiff-4.0.0beta2/release_lib_x64/libtiff.dll" todir="${xlib_bin64_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external.dir}/podofo-0.8.1-NextLabs-WFSE/release_lib_x64_vs2008/PoDoFoLib.dll" todir="${xlib_bin64_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
		<copy file="${external.dir}/zlib/zlib-1.2.5/release_lib_x64/zlibwapi.dll" todir="${xlib_bin64_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
	</target>

	<target name="clean">
		<delete dir="${xlib_dir}" />
	</target>
</project>
